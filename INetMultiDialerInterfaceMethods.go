// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/goLuno/netMultiDialer (interfaces: INetMultiDialer)

// Package netMultiDialer is a generated GoMock package.
package goCommsMultiDialer

import (
	"context"
	fmt "fmt"

	errors "github.com/bhbosman/gocommon/errors"
)

// Interface A Comment
// Interface github.com/bhbosman/goLuno/netMultiDialer
// Interface INetMultiDialer
// Interface INetMultiDialer, Method: Send
type INetMultiDialerSendIn struct {
	arg0 interface{}
}

type INetMultiDialerSendOut struct {
	Args0 error
}
type INetMultiDialerSendError struct {
	InterfaceName string
	MethodName    string
	Reason        string
}

func (self *INetMultiDialerSendError) Error() string {
	return fmt.Sprintf("error in data coming back from %v::%v. Reason: %v", self.InterfaceName, self.MethodName, self.Reason)
}

type INetMultiDialerSend struct {
	inData         INetMultiDialerSendIn
	outDataChannel chan INetMultiDialerSendOut
}

func NewINetMultiDialerSend(waitToComplete bool, arg0 interface{}) *INetMultiDialerSend {
	var outDataChannel chan INetMultiDialerSendOut
	if waitToComplete {
		outDataChannel = make(chan INetMultiDialerSendOut)
	} else {
		outDataChannel = nil
	}
	return &INetMultiDialerSend{
		inData: INetMultiDialerSendIn{
			arg0: arg0,
		},
		outDataChannel: outDataChannel,
	}
}

func (self *INetMultiDialerSend) Wait(onError func(interfaceName string, methodName string, err error) error) (INetMultiDialerSendOut, error) {
	data, ok := <-self.outDataChannel
	if !ok {
		generatedError := &INetMultiDialerSendError{
			InterfaceName: "INetMultiDialer",
			MethodName:    "Send",
			Reason:        "Channel for INetMultiDialer::Send returned false",
		}
		if onError != nil {
			err := onError("INetMultiDialer", "Send", generatedError)
			return INetMultiDialerSendOut{}, err
		} else {
			return INetMultiDialerSendOut{}, generatedError
		}
	}
	return data, nil
}

func (self *INetMultiDialerSend) Close() error {
	close(self.outDataChannel)
	return nil
}
func CallINetMultiDialerSend(context context.Context, channel chan<- interface{}, waitToComplete bool, arg0 interface{}) (INetMultiDialerSendOut, error) {
	if context != nil && context.Err() != nil {
		return INetMultiDialerSendOut{}, context.Err()
	}
	data := NewINetMultiDialerSend(waitToComplete, arg0)
	if waitToComplete {
		defer func(data *INetMultiDialerSend) {
			err := data.Close()
			if err != nil {
			}
		}(data)
	}
	if context != nil && context.Err() != nil {
		return INetMultiDialerSendOut{}, context.Err()
	}
	channel <- data
	var err error
	var v INetMultiDialerSendOut
	if waitToComplete {
		v, err = data.Wait(func(interfaceName string, methodName string, err error) error {
			return err
		})
	} else {
		err = errors.NoWaitOperationError
	}
	if err != nil {
		return INetMultiDialerSendOut{}, err
	}
	return v, nil
}

func ChannelEventsForINetMultiDialer(next INetMultiDialer, event interface{}) (bool, error) {
	switch v := event.(type) {
	case *INetMultiDialerSend:
		data := INetMultiDialerSendOut{}
		data.Args0 = next.Send(v.inData.arg0)
		if v.outDataChannel != nil {
			v.outDataChannel <- data
		}
		return true, nil
	default:
		return false, nil
	}
}
